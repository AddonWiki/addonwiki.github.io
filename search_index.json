[{"path":"主页.md","content":"# **AddonWiki**\n## **附加包维基**\n*****\n*Hello Everyone*，欢迎访问本站。\n本站大部分围绕MinecraftBedrock基岩版的Addon附加包相关内容，也会有少部分Addon附加包以外的基岩版内容。\n![](https://img.imgdb.cn/item/60138c2d3ffa7d37b336b383.png)\n\n### **导航**\n[主页]()：This\n[Addon入门教程]()：将会对Addon整体概念与基础内容进行讲解，分为1.AddOns基础知识、2.AddOns组成结构、3.自定义游戏内容、4.后期 四个章节\n[基础概念]()：认识语言文件、命令函数以及结构文件，并初步了解组件、组件组、事件三大巨头\n[名词解释]()：各类专业名词的解释\n[专辑]篇()\n[脚本引擎]()\n\n### **关于**\nBy BIYUEHU，本站所有文章严禁转载、二次发布等\nMyBlog：[源](https://biyuehu.github.io)、[国内镜像](https://biyuehu.gitee.io)\nBilibili：[碧月狐dada](https://space.bilibili.com/293767574)\n\n### **贡献 **\n目前由我一人维护、编写文档教程，目前还有少部分文档不太完善或有错误。如若您有一定能力可以帮助、完善文档\n","title":"主页"},{"path":"Addon入门教程.md","content":"### **本教程目录**\r\n**正在更新中ing...**\r\n#### 1.AddOns基础知识\r\n##### 1-1.AddOns附加包的定义与发展史\r\n##### 1-2.JSON基础认识  \r\n##### 1-3.工具准备\r\n\r\n#### 2.AddOns的组成结构\r\n##### 2-1.第一个包!\r\n##### 2-2.导入与测试\r\n\r\n#### 3.自定义游戏内容\r\n##### 3-1.自定义物品\r\n##### 3-2.自定义方块\r\n##### 3-3.自定义配方\r\n###### 3-3-1.自定义合成\r\n###### 3-3-2.自定义熔炼\r\n###### 3-3-3.自定义切石机\r\n###### 3-3-4.自定义酿造台\r\n###### 3-3-5.自定义制图台\r\n##### 3-4.自定义生成结构\r\n###### 3-4-1.自定义生物群系\r\n###### 3-4-2.自定义树特征\r\n###### 3-4-3.自定义矿石特征\r\n###### 3-4-4.自定义结构特征\r\n##### 3-5.自定义实体\r\n###### 3-5-1.组成结构\r\n###### 3-5-2.行为包部分-实体行为(必选)\r\n###### 3-5-3.行为包部分-实体生成(可选)\r\n###### 3-5-4.行为包部分-实体掉落物(可选)\r\n###### 3-5-5.资源包部分-实体资源包定义(必选)\r\n###### 3-5-6.资源包部分-材质(可选)\r\n###### 3-5-7.资源包部分-模型(可选)\r\n###### 3-5-8.资源包部分-贴图(可选)\r\n###### 3-5-9.动画\r\n###### 3-5-10.动画控制器\r\n###### 3-5-11.资源包部分-渲染控制器(可选)\r\n###### 3-5-10.动画控制器\r\n##### 3-6.自定义颗粒效果\r\n##### 3-7.自定义音乐与音效\r\n\r\n\r\n\r\n#### 4.后期篇\r\n###### 4-1.Addon加密\r\n###### 4-2.Addon发布","title":"Addonr入门教程"},{"path":"Addon教程前言.md","content":"## **前言**\r\n本贴将会更新MINECRAFTBE基岩版的Add-Ons附加包教程\r\n欢迎您的关注!\r\n\r\n本文章内容部分摘自[**MinecraftWiki**](https://minecraft-zh.gamepedia.com/Minecraft_Wiki)\r\n\r\n如若文章有错误地方欢迎各位大佬指出！\n有时间会尽量更新教程，但只确保可适用于正式版，阅读之前请先确保您的版本与教程适用的版本一致\n*目前可适用版本：正式版1.16.200.2*\n配合AddonAPI文档一起食用，效果更佳\n\r\n\r\n**版权@2020-2021 BIYUEHU，本文档严禁转载**\n\n\r\n\r\n### **对于某些人**\r\n如果你学Add-Ons只是<font color=\"#FF0000\">**纯属为了恰烂钱（仅批评用低质量作品骗钱,不包括做精品收费一类的）或者没有打算努力研究下去的恒心</font>** 的话都**爬! 爬!! 爬!!!**\n\n\r\n\r\n### **基础要求**\r\n**确保您会使用您的系统或设备，而不是只会用来玩玩游戏看看视频**\r\n**确保您会文件管理与文件编辑**\r\n**确保您有足够的耐心与恒心**\r\n**熟能生巧，确保每看完一篇教程后你都能亲自动手写一写**","title":"0.Addon入门教程前言"},{"path":"1.AddOns基础知识.md","content":"### **本章目录**\n#### 1.AddOns基础知识\r\n##### 1-1.AddOns附加包的定义与发展史\r\n##### 1-2.JSON基础认识  \r\n##### 1-3.工具准备","title":"1.AddOns基础知识"},{"path":"1-1.AddOns附加包的定义与发展史.md","content":"### 定义\r\n**附加包（Add-on）**是朝向Minecraft全版本自定义的坚实一步，它受Mojang官方支持。由资源包+行为包组成。目前，还只有基岩版的平台支持附加包(包括Windows 10、Gear VR和Fire TV)。这些版本现在允许玩家去更改他们世界的样貌（材质）、改变物品及生物的模型、修改生物的行为，这些功能都可以通过资源包和行为包来实现。此处提供的文档受官方支持与核实，是由Minecraft开发团队提供籍以协助社区发布的。\r\n\r\n\r\n\r\n**以上改编自[MinecraftWIKI](https://minecraft-zh.gamepedia.com/%E9%99%84%E5%8A%A0%E5%8C%85)**\n*****\n\r\n\r\n\r\n如果您玩过**JAVA版**，那么您可以把附加包理解为JAVA版的**数据包**\r\n说来很巧，**附加包**与**数据包**在许多地方都有相似之处\r\n首先它们都使用的**JSON**,其次也都是**官方**的而非第三方,也无需任何多余的**启动器**或**框架**才能加载**原版**即可。\n\n\r\n至于两者**谁强谁弱**，这也无法一口肯定\r\n在有些地方数据包远远胜过了附加包（如数据包在1.16加入的自定义维度）,也有些地方则相反（如附加包的精华部分——实体）\n*****\n\r\n\r\n\r\n\r\nAddon大部分文件均由**JSON**编写\r\n在1.9.0.3beta加入了前所未有的的**JavaScript脚本引擎**，虽然现在也不怎么完善，也只对WINDOWS10平台开放，安卓需使用方启加载，IOS彻底没救。但也让开发者不再受限于第三方的MODAPI。\r\n(比如IC/HZ与张卓伟的方块启动器的MODPE)\r\n除此之外，JavaScripts脚本引擎的**experimental_ui**基于HTML5，因此还会涉及到HTML与CSS等语言\n\r\n\r\n### **基岩版\"MODAPI框架\"**\r\n在JAVA版中有许多的MODAPI框架,如:Forge,Fabric...\r\n而基岩版也是如此，也有许多形形色色的”MODAPI“\r\n\r\n\r\n\r\n#### **官方:**\r\n#####  Addon附加包（MOJANG）\n+ 资源包（Resource_Pack）\n+ +  材质包\n+ +  着色器（光影）\n+ +  语言包\n+ +  音乐包\n+ 行为包（Behavior_Pack）\n+ + Function命令函数\n+ + Script Engine脚本引擎（JavaScript）\n\r\n##### Python MOD （网易,基于Addon）\n\r\n\r\n\r\n\r\n#### **第三方**\r\n##### 外置型:\r\n###### BlockLauncher方块启动器\r\n###### GenericLauncher\r\n###### Toolbox\r\n###### ModdedPE\r\n\r\n##### 内嵌型:\r\n##### InnerCore\r\n\r\n#### 实例型:\r\n###### Horizon\r\n\r\n\r\n#### 服务器\r\n\r\n###### 基于官方BDS基岩版专用服务端:\r\n**Bedrock Delicated Launche(加载BDLMOD)**\r\n**Element Zer(有EZDLL、EZJS等分支)**\r\n**BDX(有BDXJS、BDXDLL、BDXLua、BDXGLang等分支)**\r\n**BDXC**\r\n**梦故加载器(有梦故DLL、梦故JSRunner等分支)**\r\n**CSR**\n**Pyr**\n**Ipyr**\n\r\n\r\n###### 完全重写类:\r\n**mcpelauncher-server**\r\n**mcpeserver**\r\n**Naïve**\r\n**PocketMine**\n\r\n**PocketMine MP**\r\n**Cobblestone Server**\r\n**NukkitX**\r\n\r\n\r\n**网易的MOD SDK API**\r\n网易干啥啥不行，但API却十分nice。不仅为原版Addon提供更多的扩展API(当然，本文章仅讲国际版的API)，还有网易的**Pymod**(python mod)，也是基于Addon，由Python语言编写，有更多的逻辑。\r\n\r\n\r\n\r\n*****\n### 前世今生(发展史)\r\n自从Minecraft的原始Java版早期开发以来，已经计划为开发人员实现添加和更改游戏内容的官方方式。官方游戏定制的计划可以追溯到2010年7月5日的Alpha v1.0.1_01，在发布之后计划称为Mod API。 据说它在Beta 1.8中发布。然后将Mod API重新命名为插件API，最初声明计划用于1.3的版本，然后用于1.4版本，然后由Curse意外地声明它将在1.5中实现。\r\n\r\n在MINECON 2012，Mojang分享了他们对插件API未来的愿景。该API将由Bukkit团队开发并旨在简化模型和下载过程，虽然包含稍微有限的功能集。最初发布开发者网站后 (http://dev.minecraft.net) 和GitHub页面，这些都在一年内被删除。\r\n\r\n开发人员曾多次提到，游戏代码中的许多更改都在准备插件API，包括2014年7月29日的Dinnerbone、Grum于2015年7月5日在“The Minecraft Team - Behind the Scenes”小组讨论和2015年10月19日，在Java版1.9的战利品表上工作时再次和Dinnerbone。一位用户回复说“我认为官方回复‘我们正在努力’真的会有很多帮助”。Dinnerbone回答说：“我们正在努力。”\r\n\r\n2016年8月12日，Searge发推文说：“MINECON 2016上将会有关于API的消息。我会谈谈我正在研究的事情以及我们的计划。但现在没有更多细节。“第二天，Grum证实了携带版上的这一点。Minecon上概述了附加组件开发的计划和路线图。\r\n\r\n**以上摘自[MinecraftWIKI](https://minecraft-zh.gamepedia.com/%E9%99%84%E5%8A%A0%E5%8C%85)**\r\n","title":"1-1.AddOns附加包的定义与发展史"},{"path":"1-2.JSON基础认识.md","content":"![JSON](https://pic.downk.cc/item/5f2fdb4814195aa594dd8bf4.jpg)\r\n**JSON(JavaScript Object Notation, JS 对象简谱)** 是一种轻量级的数据交换格式。它基于 ECMAScript (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。\r\n\r\n中文名：JavaScript 对象简谱\r\n外文名：JavaScript Object Notation\r\n缩写：JSON\r\n\r\n**以上摘自[百度百科](https://baike.baidu.com/item/JSON/2462549?fr=aladdin)**\n*****\n\r\n\r\n### **JSON 语法**\r\n```json\r\n{\r\n  \"姓\": \"菜\",\r\n  \"名\": \"徐坤\",\r\n  \"男的?\": false,\r\n  \"年龄\": 1,\r\n  \"爱好\": [ \"唱\", \"跳\", \"rap\" ]\r\n}\r\n\r\n```\r\n**JSON**一共包括五种结构\r\n分别为**对象、字符串、布尔值、数字、数组**\r\n\r\n#### **对象**\r\n**对象**将会被花括号{ }所包囊，里面由**键**与**值**组成\r\n**键**为预先定义的属性，需要用被英文引号\"\"包囊。\r\n**PS:JSON里一切符号均为英文符号，不支持中文符号**\r\n在栗子里，姓、名、男的？、年龄、爱好 均为键。\r\n\r\n#### **值**\r\n**值**一共有四种类型，分别为：字符串、布尔值、数字、数组。\r\n\r\n##### **字符串**\r\n**字符串**会被英文引号\"\"包囊\r\n\r\n##### **布尔值**\r\n**布尔值**共有两种类型：\r\n**true**（真）与**false**（假）\r\n无需引号包囊\r\n\r\n##### **数字**\r\n顾名思义，可以为整数、负数、浮点数（即小数），将由**键**决定。\r\n无需要引号包囊\r\n\r\n##### **数组**\r\n由方括号[ ]包囊，至于方括号里面的**值**也依然可以为字符串、布尔值、数字、数组。\r\n\r\n没错，你可以无限套娃！当然，玩梗适度，反复套来套去确实可以实现一些逻辑。\r\n\r\n\r\n\r\n\r\n\r\n### **JSON注释**\r\nMINECRAFT对**JSON**文件**支持**\r\n单行注释//\r\n与\r\n/* 和 */ 组合的注释\r\n栗子:\r\n```json\r\n{\r\n    //我是一个注释\r\n\r\n    /*\r\n    从这\r\n\r\n\r\n\r\n    到这都是注释\r\n    */\r\n}\r\n\r\n```\r\n\r\n<font color=\"#FF0000\">注意：在正规的JSON中是不存在注释的，用在普通JSON文件里将会是错误。但是，MC特意支持了这种注释，依然可以被解析。</font>\r\n\r\n\r\n\r\n\r\n\r\n","title":"1-2.JSON基础认识"},{"path":"1-3.工具准备.md","content":"在**AddOns开发**时肯定是需要用到各式各样的工具的\r\n### WINDOWS10平台(建议)：\r\n\r\n**绘图工具：**\r\nAdobe Photoshop CC，画图3D(WIN10自带)\r\n\r\n**文件管理器：**\r\nWINDOWS自带 文件资源管理器\r\n\r\n**文本编辑器：**\r\n~~JSON不像C艹,JVAV~~这些语言要配置环境，你甚至可以用记事本来编辑json!但十分不建议。\r\n你可以选择Notepad++，Visual Studio Code这些优秀的文本编辑器\r\n\r\n**建模：**\r\nBlockbench\r\n\r\n\r\n### 安卓：\r\n\r\n**绘图工具：**\r\n像素小画家\r\n\r\n**文件管理器：**\r\nMT文件管理器，ES文件管理器\r\n\r\n**文本编辑器：**\r\n文件管理器自带的即可\r\n\r\n**建模：**\r\nBlockbench（网页）\r\n\r\n\r\n### IOS：\r\n抬走不送","title":"1-3.工具准备"},{"path":"2.AddOns组成结构.md","content":"### **本章目录**\n#### 2.AddOns的组成结构\r\n##### 2-1.第一个包!\r\n##### 2-2.导入与测试","title":"2.AddOns组成结构"},{"path":"2-1.第一个包.md","content":"**Addon**基本组成部分如下:\r\n\r\n#### Behavior_Pack\r\n+ animation_controllers //动画控制器(服务端)\r\n+ animations //动画(服务端)\r\n+ biomes //生物群系属性定义\r\n+ blocks //方块属性定义\r\n+ entities //实体行为属性定义\r\n+ feature_rules //生成规则\r\n+ features  //生成特征\r\n+ functions  //function指令，用于一次性执行多条指令\r\n+ items  //物品属性定义\r\n+ loot_tables  //战利品定义\r\n+ recipes  //配方定义\r\n+ scripts  //JS脚本\r\n+ spawn_rules //生物生成定义\r\n+ trading  //交易列表定义\r\n+ loot_tables  //战利品定义\r\n+ manifest.json  //包识别（描述）文件\r\n+ pack_icon.png  //包图标\r\n+ bug_pack_icon.png  //包出问题后的图标\n\n\r\n\r\n#### Resource_Pack\r\n+ animation_controllers //动画控制器(客户端)\r\n+ animations //动画(客户端)\r\n+ attachables  //穿戴物品定义\r\n+ entity  //实体定义\r\n+  experimental_ui  //实验UI\r\n+ font  //游戏内特殊标识符\r\n+ items  //物品视觉属性定义\r\n+ materials  //材料\r\n+ models  //模型\r\n+ particles  //粒子效果属性定义\r\n+ render_controllers  //渲染控制器属性定义\r\n+ sounds  //音效,音乐存放\r\n+ texts  //lang语言文件存放\r\n+ textures  //贴图存放\r\n+ ui  //用户界面定义\r\n+ shaders  //着色器\r\n+ credits  //终末之诗文字存放\r\n+ biomes_client.json  //不同生物群系的天空和水颜色\r\n+ block.json  //方块定义\r\n+ contents.json  \r\n+ items_offsets_client.json  \r\n+ loading_messages.json  //加载世界时的提示语\r\n+ sounds.json  //音效,音乐定义\r\n+ splashes.json  //小标题\r\n+ manifest.json  //包识别（描述）文件\r\n+ pack_icon.png  //包图标\r\n+ bug_pack_icon.png  //包出问题后的图标\r\n\n\r\n\r\n不要看到这么多文件夹与文件就头昏，并不是全都要用上的，如果只是一个能被**识别与装载**的包只需要一个描述文件manifest.json。\n### 题外话\n附加包 = 行为包 + 资源包，资源包/行为包 ≠ 附加包\n附加包是行为包与资源包结合后的称呼，除资源包与行为包外还有皮肤包（Skin_pack）与世界模板（world_template）\n*****\n\r\n\r\n首先**新建**一个文件夹，名字随意\r\n![1](https://pic.downk.cc/item/5f16a47114195aa594c509c1.png)\r\n![2](https://pic.downk.cc/item/5f16a47114195aa594c509c3.png)\r\n\r\n### manifest.json\r\n首先最好在文件管理器里把这两个选项勾上\r\n![3](https://pic.downk.cc/item/5f16a47114195aa594c509c5.png)\r\n\r\n\r\n接着新建一个txt文件，名字带后缀改成”manifest.json“\r\n\r\n![4](https://pic.downk.cc/item/5f16ac3814195aa594c8808c.png)\r\n此时windows可能会有弹窗提示，直接点击是\r\n\r\n\r\n然后输入以下代码:\r\n```json\r\n{\r\n    \"format_version\": 1,\r\n    \"header\": {\r\n        \"name\": \" \",\r\n        \"description\": \" \",\r\n        \"uuid\": \" \",\r\n        \"version\": [0, 0, 1]\r\n    },//\r\n    \"modules\": [\r\n        {\r\n            \"description\": \" \",\r\n            \"type\": \" \",\r\n            \"uuid\": \" \",\r\n            \"version\": [0, 0, 1]\r\n        }\r\n    ]\r\n}\r\n```\r\n**注意：**<font color=\"#FF0000\">不要直接复制到粘贴，先试着自己写一下找出感觉来！</font>\r\n\r\n#### **解释：**\n##### format_version，必选项\n定义了附加包的版本。除非必要，否则请勿更改写1即可\n##### header\n描述这个包的标题、简介、版本等信息，必选项\n| 键  | 描述 | 类型 | 默认值 | 可选值 |\n| --- | --- | --- | --- | --- |\n| name | 包的标题 | 字符串 | null | 所有字符 |\n| description | 包的简介 | 字符串 | null | 所有字符 |\n| uuid | 包的唯一标识符，不能重复 | 字符串 | null | UUID |\n| version | 版本号 | 数组 | null | [主版本号, 次版本号, 修正版本号] |\n| base_game_version | 世界模板所适用的基础游戏版本 | 数组 | null | [主版本号, 次版本号, 修订号] |\n| lock_template_options | 任何世界模板都需要此选项。这将禁止玩家修改世界选项 | 布尔 | true | true或false |\n| min_engine_version | 此包适配的最低游戏版本 | 字符串 | null | 字符串 |\n##### modules\n描述了组成附加包的各个模块，必选项\n| 键  | 描述 | 类型 | 默认值 | 可选值 |\n| --- | --- | --- | --- | --- |\n| description | 包的简介，目前这并不是面向用户 | 字符串 | null | 所有字符 |\n| type | 包的类型 | 字符串 | null | resources、data、client_data、interface、world_template、skin_pack，分别对应资源包、行为包、行为包（开启脚本引擎）、界面、世界模板、皮肤包 |\n| uuid | 包的唯一标识符，不能重复 | 字符串 | null | UUID |\n| version | 版本号 | 数组 | null | [主版本号, 次版本号, 修正版本号] |\n**UUID**\nUUID是唯一标识符，用于区分不同的包，因此这不能重复\nuuid以xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx的格式写入，其中每个x是一个十六进制值（0-9或a-f）\n您可以前往[这里](https://biyuehu.gitee.io/uuid/)生成uuid\n##### dependencies\n指定该包的依赖项，仅资源包于行为包之间而言，可选项\n| 键  | 描述 | 类型 | 默认值 | 可选值 |\n| --- | --- | --- | --- | --- |\n| uuid | 依赖包的唯一标识符，不能重复 | 字符串 | null | UUID |\n| version | 依赖包的版本号 | 数组 | null | [主版本号, 次版本号, 修正版本号] |\n##### capabilities\n附加包可以使用的其他功能，一般情况下，这些功能不一定启用。该项的值的类型为数组，可选项\n以下是目前可开启的其它功能\n| 名称  | 描述 |\n| --- | --- |\n| experimental_custom_ui | 允许附加包中的HTML文件自定义UI |\n| chemistry | 允许附加包添加、更改或替换有关化学的功能|\n##### metadata\n附加包的其他信息，可选项\n| 键  | 描述 | 类型 | 默认值 | 可选值 |\n| --- | --- | --- | --- | --- |\n| authors | 包作者名字 | 数组 | null | |\n| license | 包协议 | 字符串 | null | 所有字符 |\n| url | 包相关链接 | 字符串 | null | 所有字符 |\n\r\n\r\n\r\n\r\n### pack_icon.png\r\n建议图片比例为1:1正方形\r\n推荐最小像素：16x16 推荐最大像素： 1024x1024","title":"2-1.第一个包!"},{"path":"2-2.导入与测试.md","content":"### 导入\r\n幸苦了这么久？那么包到底能不能用了？！\r\n只要您的json格式无误，那么答案是肯定的\r\n\r\n把您的包**压缩**一下\r\n\r\n![5](https://pic.downk.cc/item/5f16af8e14195aa594ca00b0.png)\r\n![6](https://pic.downk.cc/item/5f16af8e14195aa594ca00b2.png)\r\n后缀改成**mcpack**，接着双击一下看能不能导入到游戏里！\r\n\r\n**注：**安卓请先在设置-档案-存储位置选项改成外部。\r\n\r\n### 测试\r\nADDON制作时**bug**肯定是不可避免的\r\n但是mojang却非常善解人意\r\n\r\n在games/com.mojang你可能会发现有这三个文件夹:\r\n![7](https://pic.downk.cc/item/5f16b28414195aa594cad6d3.png)\r\n很多人可能都会忽略这个，但其实这是专门用来放测试资源的文件夹\r\n\r\n#### 有何不同？\r\n1.放在这些文件夹里的资源当被装到地图上时会**直接调用**，不会再复制一遍。\r\n2.在游戏时即可进行**改动**，重进存档后游戏会自动**重新加载**，而不需要退出游戏重进那么麻烦","title":"2-2.导入与测试"},{"path":"3.自定义游戏内容.md","content":"### **本章目录**\n#### 3.自定义游戏内容\r\n##### 3-1.自定义物品\r\n##### 3-2.自定义方块\r\n##### 3-3.自定义配方\r\n###### 3-3-1.自定义合成\r\n###### 3-3-2.自定义熔炼\r\n###### 3-3-3.自定义切石机\r\n###### 3-3-4.自定义酿造台\r\n###### 3-3-5.自定义制图台\r\n##### 3-4.自定义生成结构\r\n###### 3-4-1.自定义生物群系\r\n###### 3-4-2.自定义树特征\r\n###### 3-4-3.自定义矿石特征\r\n###### 3-4-4.自定义结构特征\r\n##### 3-5.自定义实体\r\n###### 3-5-1.组成结构\r\n###### 3-5-2.行为包部分-实体行为(必选)\r\n###### 3-5-3.行为包部分-实体生成(可选)\r\n###### 3-5-4.行为包部分-实体掉落物(可选)\r\n###### 3-5-5.资源包部分-实体资源包定义(必选)\r\n###### 3-5-6.资源包部分-材质(可选)\r\n###### 3-5-7.资源包部分-模型(可选)\r\n###### 3-5-8.资源包部分-贴图(可选)\r\n###### 3-5-9.动画\r\n###### 3-5-10.动画控制器\r\n###### 3-5-11.资源包部分-渲染控制器(可选)\r\n###### 3-5-10.动画控制器\r\n##### 3-6.自定义颗粒效果\r\n##### 3-7.自定义音乐与音效\n从本章开始，请务必与AddonAPI文档一起食用","title":"3.自定义游戏内容"},{"path":"3-1.自定义物品.md","content":"### 行为包\r\n首先在行为包目录创建“items”文件夹，接着在里面新建json文件（文件名字随意）\r\n\r\n```json\r\n{\r\n\"format_version\": \"1.16.200\",\r\n\"minecraft:item\": {\r\n  \"description\": {\r\n  \"identifier\": \"byh:item\"\r\n  },\r\n \r\n  \"components\": {}\r\n }\r\n}\r\n```\r\n\r\n#### 解释：\n##### format_version\n格式版本\n##### minecraft:item\n定义物品的各个模块，基础信息、组件等\n| 键  | 描述 | 类型 | 默认值 | 可选值 |\n| --- | --- | --- | --- | --- |\n| description | 物品基础信息 | 对象 | null | |\n| components | 组件 | 对象 | null | |\n**组件**\n请参考AddonAPI文档，包括物品组件、方块组件、实体组件等\n###### description\n| 键  | 描述 | 类型 | 默认值 | 可选值 |\n| --- | --- | --- | --- | --- |\n| identifier | 物品唯一标识符 | 字符串 | null | 命名空间:ID |\n| category | 物品分类 | 字符串 | null | items、equipment、natural、block|\n| is_experimental | 需要开启实验玩法才能注册 | 布尔 | false | true或false |\r\n\r\n**命名空间**\r\n相当于**前缀**，会被应用到物品/方块/实体ID等地方\r\nMinecraft原版的命名空间即为“Minecraft”\r\n###### 有何用？\r\n假如两个附加包里都有个叫做“item”的物品，你是无法同时使用的，先加载哪个包才能先加载哪个物品\r\n此时，**命名空间**就有作用了，如果一个改为“a:item”,另一个改为\"b:item\"，这样就不会冲突\r\n命名空间和ID一样都可以是任何字母+数字，命名空间你可以写您的名字（英文或拼音）\n### 贴图与语言\n#### 新格式\n1.16.100及以上版本格式（选择该格式的话，行为包的item文件格式版本也需改成1.16.100及以上）\n在行为包的item文件组件中写入下列两个组件\n```json\n        \"components\": {    \r\n          \"minecraft:display_name\": {},//物品名字，可在{}内填写”value“: \"字符串\"直接定义（不建议），否则须在语言文件内定义\r\n          \"minecraft:icon\": { //物品贴图\r\n            \"texture\": \"byh:item\"  //值为字符串，贴图名字（不是贴图文件名字）\r\n          }   \n```\n接着在资源包根目录新建一个“textures”文件夹，在里面接着创建一个“item_texture.json”文件\r\n```json\r\n{\r\n  \"resource_pack_name\": \"vanilla\",\r\n  \"texture_name\": \"atlas.items\",\r\n  \"texture_data\": {\r\n    \"byh:item\": { //对应物品行为文件中minecraft:icon的texture的值\r\n      \"textures\": \" \"  //贴图位置，起始目录为资源包根目录\r\n    }\r\n  }\r\n}   \r\n\r\n```\n#### 旧格式\n1.16.100之前版本格式（选择该格式的话，行为包的item文件格式版本也需改成1.16.100之前）\n\r\n\r\n\r\n同样，在资源包根目录创建一个“items”文件夹，接着创建一个json文件。\r\n\r\n```json\r\n{\r\n  \"format_version\": \"1.16.0\",\r\n  \"minecraft:item\": {\r\n    \"description\": {\r\n      \"identifier\": \"byh:item\", //物品ID，要与行为包里的一致 \r\n      \"category\": \"Nature\"  //物品类型\r\n    },\r\n\r\n    \"components\": {\r\n      \"minecraft:icon\": \"byh:item\" // 物品贴图ID\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\n\r\n接着在资源包根目录新建一个“textures”文件夹，在里面接着创建一个“item_texture.json”文件\r\n```json\r\n{\r\n  \"resource_pack_name\": \"vanilla\",\r\n  \"texture_name\": \"atlas.items\",\r\n  \"texture_data\": {\r\n    \"byh:item\": { //对应物品贴图名字\r\n      \"textures\": \"textures/items/byh:item\"  //贴图位置，起始目录为资源包根目录\r\n    }\r\n  }\r\n}   \r\n\r\n```\r\n\r\n\r\n资源包根目录创建一个“texts”文件夹，这个是语言文件夹\r\n接着再新建一个文件，名字“zh_CN.lang”\r\n\r\n这个表示中文简体语言，繁体则是“zh_TW”，英语(美)“en_US”\r\n其它语言文件也是同理。\r\n\r\n\r\n``item.byh:item.name=测试物品``\r\n\r\n\r\n\r\n格式：item.命名空间:ID.name=显示的文字\n**<font color=\"#FF0000\">注意大小写</font>**","title":"3-1.自定义物品"},{"path":"3-2.自定义方块.md","content":"### 行为包\r\n首先在行为包目录创建“blocks”文件夹，接着在里面新建json文件（文件名字随意）\r\n```json\r\n{\r\n \"format_version\": \"1.16.200\",\r\n \"minecraft:block\": {\r\n   \"description\": {\r\n     \"identifier\": \"byh:block\",  \r\n     \"register_to_creative_menu\": true,  \r\n     \"is_experimental\": false\r\n   },\r\n   \"components\": {}  \r\n }\r\n}\r\n```\r\n#### 解释：\n##### format_version\n格式版本\n##### minecraft:item\n定义方块的各个模块，基础信息、组件等\n| 键  | 描述 | 类型 | 默认值 | 可选值 |\n| --- | --- | --- | --- | --- |\n| description | 方块基础信息 | 对象 | null | |\n| components | 组件 | 对象 | null | |\n###### description\n| 键  | 描述 | 类型 | 默认值 | 可选值 |\n| --- | --- | --- | --- | --- |\n| identifier | 方块唯一标识符 | 字符串 | null | 命名空间:ID |\n| register_to_creative_menu | 注册到创造物品栏。PS:1.16已废。 | 布尔 | true | true或false |\n| is_experimental | 需要开启实验玩法才能注册 | 布尔 | false | true或false |\r\n\r\n\r\n\r\n### 资源包\n#### 贴图与语言\n\r\n在资源包根目录新建一个\"blocks.json\"文件。\r\n```json\r\n{\r\n  \"format_version\": [1,16,0],\r\n  \"byh:block \": {  //命名空间:ID\r\n    \"textures\": \"byh:block\",  //方块的图标名字\r\n    \"sound\": \"stone\"  //方块的音效，可直接调用原版也可以自定义音效。\r\n  }\r\n}  \r\n```\r\n该文件用于定义方块的图标与音效。\r\n\r\n然后在 资源包根目录/textures/ 文件夹里新建\"terrain_texture.json\"文件\r\n```json\r\n{\r\n  \"resource_pack_name\": \"vanilla\",\r\n  \"texture_name\": \"atlas.terrain\",\r\n  \"padding\": 5,\r\n  \"num_mip_levels\": 4,\r\n  \"texture_data\": {\r\n    \"byh:block\": {  //图标名字\r\n      \"textures\": \"textures/blocks/byh:block\"  //贴图路径\r\n    }\r\n  }\r\n}    \r\n```\r\n\r\n**语言**\r\n``tile.byh:block.name=测试方块``\r\n格式：tile.命名空间:ID.name=显示文字","title":"3-2.自定义方块"},{"path":"3-3.自定义配方.md","content":"### **本节目录**\n##### 3-3.自定义配方\r\n###### 3-3-1.自定义合成\r\n###### 3-3-2.自定义熔炼\r\n###### 3-3-3.自定义切石机\r\n###### 3-3-4.自定义酿造台\r\n###### 3-3-5.自定义制图台\n\n**自定义配方**并非**仅指**工作台合成配方，我把配方类型一共分为了五类：\r\n1.自定义合成（工作台或背包里合成）\r\n2.自定义熔炼（熔炉/高炉/烟熏炉/篝火）\r\n3.自定义切石机配方\r\n4.自定义酿造台配方\r\n5.自定义制图台配方\r\n\r\n首先在行为包根目录创建一个\"recipes\"文件夹，所有类型的配方都将放在该文件夹里或该文件夹的子文件夹里。","title":"3-3.自定义配方"},{"path":"3-3-1.自定义合成.md","content":"在**recipes**文件夹里新建一个JSON文件，名字随意。\r\n\r\n配方分为**无序合成**与**有序合成**\r\n**有何区别？**\r\n无序合成：只要在合成栏有设定好的物品（不能多也不能少一个多余的物品）即可合成出。\r\n有序物品：在合成栏里的位置,数量都必须与设定里的一样才能合成。\r\n\r\n#### 无序合成\r\n```json\r\n{\r\n  \"format_version\": \"1.16\",\r\n  \"minecraft:recipe_shapeless\": {\r\n    \"description\": {\r\n    \"identifier\": \"byh:g1\"  //该配方的 命名空间:ID\r\n    },    \r\n    \"tags\": [ \"crafting_table\" ],  //配方类型：工作台\r\n    \"ingredients\": [\r\n      {\r\n        \"item\": \" \",  //物品ID，必选值\r\n        \"data\": 0,  //物品特殊值，可选值\r\n        \"count\": 1  /物品数量 ，可选值\r\n      },\r\n      {\r\n        \"item\": \"\" \r\n      }\r\n    ],\r\n    \"result\": {\r\n      \"item\": \"\"   //合成出来的结果\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### 有序合成\r\n```json\r\n{\r\n  \"format_version\": \"1.16\",\r\n  \"minecraft:recipe_shaped\": {\r\n    \"description\": {\r\n      \"identifier\": \"byh:g2\"  \r\n    },\r\n\r\n\r\n    \"tags\": [ \"crafting_table\" ],\r\n    \"pattern\": [  //图表\r\n      \"aaa\",\r\n      \"aba\",\r\n      \"aaa\"  //图表的规格随意,但最大只能3x3,里面的每个字母都对应一个物品，如果该位置是空气就直接用空格表示。\r\n    ],\r\n    \"key\": {\r\n      \"a\": {  //对照上面\r\n        \"item\": \" \"  //物品1\r\n      },\r\n      \"b\"{  //对照上面\r\n        \"item\": \" \"  //物品2\r\n      }\r\n    },\r\n    \"result\": {\r\n      \"item\": \" \"  //结果\r\n    }\r\n  }\r\n}\r\n```","title":"3-3-1.自定义合成"},{"path":"3-3-2.自定义熔炼.md","content":"熔炼有四种不同方式：熔炉,高炉,烟熏炉,篝火\r\n\r\n在**recipes**文件夹里新建一个JSON文件，名字随意。\r\n\r\n```json\r\n{\r\n  \"format_version\": \"1.16\",\r\n  \"minecraft:recipe_furnace\": {\r\n    \"description\": {\r\n    \"identifier\": \" \"\r\n    },\r\n    \"tags\": [\"furnace\"],  //类型：熔炉，也可以是高炉,烟熏炉,篝火(因为这都是同一属性的)\r\n    \"input\": \" \",  //输入物品\r\n    \"output\": \" \"  //输出物品\r\n  }\r\n}\r\n```\r\n\r\n**furnace**\r\n使用熔炉合成配方\r\n\r\n熔炉（Furnace）是一种用来烧炼方块和物品并把它们转换为另一种方块或物品的方块。\r\n\r\n**blast_furnace**\r\n使用高炉合成配方\r\n\r\n高炉（Blast Furnace）是与熔炉和烟熏炉相似的方块实体，专用于烧炼矿石、盔甲和工具。\r\n\r\n**smoker**\r\n使用烟熏炉合成配方\r\n\r\n烟熏炉（Smoker）是屠夫村民的工作站点方块，是专门用于烹制熟食的熔炉变种。\r\n\r\n**campfire**\r\n使用篝火合成配方\r\n\r\n篝火（Campfire） 是一种可用于烹饪食物并作为光源或烟雾信号使用的方块。","title":"3-3-2.自定义熔炼"},{"path":"3-3-3.自定义切石机.md","content":"还是在**recipes**文件夹里新建一个JSON文件，名字随意。\r\n\r\n```json\r\n{\r\n  \"format_version\": \"1.16\",\r\n  \"minecraft:recipe_shapeless\": {\r\n    \"description\": {\r\n        \"identifier\": \" \"\r\n        },\r\n        \"tags\": [ \"stonecutter\" ],  //类型：切石机\r\n        \"priority\": 1,  //在切石机可合成界面里的位置,1最靠前面\r\n        \"ingredients\": [\r\n         {\r\n            \"item\": \" \"  //输入物品\r\n          }\r\n        ],\r\n        \"result\": {\r\n          \"item\": \" \"  //结果\r\n        }\r\n  \t}\r\n}\r\n```","title":"3-3-3.自定义切石机"},{"path":"3-3-4.自定义酿造台.md","content":"依然是在**recipes**文件夹里新建一个JSON文件，名字随意。\r\n\r\n```json\r\n{\r\n  \"format_version\": \"1.12\",\r\n  \"minecraft:recipe_brewing_container\": {\r\n    \"description\": {\r\n      \"identifier\": \" \"\r\n    },\r\n\r\n    \"tags\": [ \"brewing_stand\" ],  //类型：酿造台\r\n\r\n    \"input\": \" \",  //输入物品1，此处原版默认为水瓶\r\n    \"reagent\": \" \",  //输入物品2\r\n    \"output\": \"  \"  //结果\r\n  }\r\n\r\n}\r\n```","title":"3-3-4.自定义酿造台"},{"path":"3-3-5.自定义制图台.md","content":"最不常用的一个自定义配方。\r\n```\r\n{\r\n  \"format_version\": \"1.12\",\r\n  \"minecraft:recipe_shapeless\": {\r\n    \"description\": {\r\n    \"identifier\": \" \"\r\n    },\r\n    \"tags\": [ \"cartography_table\" ],  //类型：制图台\r\n    \"ingredients\": [\r\n      {\r\n        \"item\": \" \"  //输入物品1，放在制图台上面的格子\r\n      },\r\n      {\r\n        \"item\": \" \"  //输入物品2，放在下面的各种\r\n      }\r\n    ],\r\n    \"result\": {\r\n      \"item\": \" \"  //结果\r\n    }\r\n  }\r\n}\r\n```","title":"3-3-5.自定义制图台"},{"path":"3-4.自定义生成结构.md","content":"### 本节目录\n##### 3-4.自定义生成结构\r\n###### 3-4-1.自定义生物群系\r\n###### 3-4-2.自定义树特征\r\n###### 3-4-3.自定义矿石特征\r\n###### 3-4-4.自定义结构特征\n","title":"3-4.自定义生成结构"},{"path":"3-4-1.自定义生物群系.md","content":"","title":"3-4-1.自定义生物群系"},{"path":"3-4-2.自定义树特征.md","content":"","title":"3-4-2.自定义树特征"},{"path":"3-4-3.自定义矿石特征.md","content":"","title":"3-4-3.自定义矿石特征"},{"path":"3-4-4.自定义结构特征.md","content":"","title":"3-4-4.自定义结构特征"},{"path":"3-5.自定义实体.md","content":"### 本节目录\n##### 3-5.自定义实体\r\n###### 3-5-1.组成结构\r\n###### 3-5-2.行为包部分-实体行为(必选)\r\n###### 3-5-3.行为包部分-实体生成(可选)\r\n###### 3-5-4.行为包部分-实体掉落物(可选)\r\n###### 3-5-5.资源包部分-实体资源包定义(必选)\r\n###### 3-5-6.资源包部分-材质(可选)\r\n###### 3-5-7.资源包部分-模型(可选)\r\n###### 3-5-8.资源包部分-贴图(可选)\r\n###### 3-5-9.动画\r\n###### 3-5-10.动画控制器\r\n###### 3-5-11.资源包部分-渲染控制器(可选)\n恭喜你！你终于来到了Addon最精华的部分——实体！\r\n至于为何是精华，在接下来的篇章中将会一一讲到。\r\n\r\n**实体**一共分为**两大类**,生物与特殊实体(个人理解)\r\n生物又分为**三大类**，被动型、中立型、敌对型\r\n特殊实体包括投掷物以及一些作用非常特殊的实体。","title":"3-5.自定义实体"},{"path":"3-5-1.组成结构.md","content":"**实体**会涉及到：\r\n**资源包**：实体资源包实体（entity）、材料（material）、贴图（texture）、模型（model）、动画（animation）、动画控制器（animation controller）、渲染控制器（render controller）、音乐与音效（sound）、颗粒效果（particles）等\r\n**行为包**：实体行为定义（entities）、动画（animation）、动画控制器（animation controller）、战利品掉落物（loot_tables）、实体生成（spawn_rules）、交易列表（trading）、脚本（scripts）等\n*****\n\r\n\r\n此时你的心理：WDF？？？这都是些什么玩意儿？？我还是个萌新啊！\r\n\r\n不用慌，这只是可涉及到范围，无需全用上。一个实体，必要的文件只需要一个**实体行为定义**文件，资源包无需任何其它文件！\r\n如果是做一个**看得见**的实体 资源包则需要 实体资源包定义、渲染控制器、模型、贴图、材质即可。\r\n\r\n如果要做一个**完整**的实体（这里的”完整“以原版猪、牛、僵尸一类的生物为准）则需要：\r\n**行为包：**实体行为定义、实体生成、实体战利品掉落物\r\n**资源包：**实体资源包定义、动画、动画控制器、渲染控制器、材料、模型、贴图、音效\r\n\r\n","title":"3-5-1.组成结构"},{"path":"3-5-2.行为包部分-实体行为必选.md","content":"\r\n**实体行为**可谓是精华的核心部分，首先你需要对实体行为的运行方式有一个大概了解\r\n\r\n![实体各部分关联示意图](https://pic.downk.cc/item/5f301be214195aa594ee3cfb.png)\r\n**实体行为**共分为三大部分：**组件、组件组、事件**\r\n\r\n\r\n#### 组件\r\n实体组件分为四大类：固有属性组件（如碰撞箱子）、行为组件（如近战、看着玩家、自由走动）、触发器、其它\r\n\r\n\r\n**触发器**被游戏调用后如果满足滤器要求将触发事件\r\n详情见 **4-6**\n\r\n\r\n#### 事件\r\n事件用于添加与删除组件组，此外，游戏也保留了一些事件，这些事件无需被触发器调用，在指定条件下就会触发（如：minecraft:entity_spawn事件在实体生成时触发）\r\n详情见 **4-6**\r\n\r\n\r\n#### 组件组\r\n分组区，每个组件组都将会存放组件，这些组件组在指定条件下会被启用或者禁用\r\n组件组将会给予生物额外的属性或者行为（组件组普遍性用处，也有些时候是用来触发动画控制器）\n\n相关接口请查阅AddonAPI文档\n\r\n\r\n### 总结：\r\n**组件定义实体属性与行为，触发器将会在指定条件下触发事件，事件将会添加或删除对应组件组，组件组将会给予生物额外的属性或者行为**\n实例，为原版猪行为，已删减不必要部分\n```json\n{\r\n  \"format_version\": \"1.13.0\",  //版本\r\n  \"minecraft:entity\": {\r\n    \"description\": {\r\n      \"identifier\": \"minecraft:pig\",  //命名空间:ID\r\n      \"is_spawnable\": true,  //会有生物蛋\r\n      \"is_summonable\": true,  /能被/summon指令生成\r\n      \"is_experimental\": false  //需要实验玩法\r\n    },\r\n\r\n    \"component_groups\": {  //组件组区\r\n\r\n      \"minecraft:pig_baby\": {  //一个组件组，这个组件组定义幼年猪特有组件，如：碰撞箱会变小、无法繁殖。\r\n        \"minecraft:is_baby\": {\r\n        },\r\n        \"minecraft:scale\": {\r\n          \"value\": 0.5\r\n        },\r\n\r\n        \"minecraft:behavior.follow_parent\": {\r\n          \"priority\": 6,\r\n          \"speed_multiplier\": 1.1\r\n        }\r\n      },\r\n\r\n\r\n      \"minecraft:pig_adult\": {  //定义成年猪特有组件，如：会有战利品掉落、可以繁殖。\r\n        \"minecraft:experience_reward\": {\r\n          \"on_bred\": \"Math.Random(1,7)\",\r\n          \"on_death\": \"query.last_hit_by_player ? Math.Random(1,3) : 0\"\r\n        },\r\n        \"minecraft:loot\": {\r\n          \"table\": \"loot_tables/entities/pig.json\"\r\n        },\r\n        \"minecraft:behavior.breed\": {\r\n          \"priority\": 4,\r\n          \"speed_multiplier\": 1.0\r\n        },\r\n          \"breed_items\": [ \"carrot\", \"beetroot\", \"potato\" ]\r\n        }\r\n      }\r\n    },\r\n\r\n\r\n    \"components\": {  //组件区，即幼年猪与成年猪都拥有的组件\r\n      \"minecraft:behavior.panic\": {\r\n        \"priority\": 3,\r\n        \"speed_multiplier\": 1.25\r\n      },\r\n      \"minecraft:behavior.random_stroll\": {\r\n        \"priority\": 7,\r\n        \"speed_multiplier\": 1.0\r\n      },\r\n      \"minecraft:behavior.look_at_player\": {\r\n        \"priority\": 8,\r\n        \"look_distance\": 6.0,\r\n        \"probability\": 0.02\r\n      },\r\n      \"minecraft:behavior.random_look_around\": {\r\n        \"priority\": 9\r\n      },\r\n\t    \"minecraft:physics\": {\r\n      },\r\n      \"minecraft:pushable\": {\r\n        \"is_pushable\": true,\r\n        \"is_pushable_by_piston\": true\r\n      }\r\n    }, \r\n\r\n\r\n    \"events\": {  //事件\r\n      \"minecraft:entity_spawned\": {  //游戏自带的事件，在该实体生成时触发\r\n        \"randomize\": [\r\n          {  //结果1\r\n            \"weight\": 95,  //几率：95%，百分比\r\n            \"remove\": {\r\n            },\r\n            \"add\": {  //如果是，则添加成年猪组件组\r\n              \"component_groups\": [\r\n                \"minecraft:pig_adult\"\r\n              ]\r\n            }\r\n          },\r\n          {\r\n            \"weight\": 5,  //几率：5%\r\n            \"remove\": {\r\n            },\r\n            \"add\": {  //如果是，则添加幼年猪组件组\r\n              \"component_groups\": [\r\n                \"minecraft:pig_baby\"\r\n              ]\r\n\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\n```\n#### 解释\n##### format_version\n格式版本\n##### minecraft:entity\n###### description\n描述了实体的基本信息\n| 键  | 描述 | 类型 | 默认值 | 可选值 |\n| --- | --- | --- | --- | --- |\n| identifier | 实体命名空间:ID | 字符串 | null | 所有字符 |\n| is_spawnable  | 实体是否有生物蛋 | 布尔 | true | true或false |\n| is_summonable | 实体是否能被/summon指令生成 | 布尔 | true | true或false |\n| is_experimental | 是否需要实验玩法 | 布尔 | false | true或false |\n| runtime_identifier ||||||\n| scripts | 脚本 | 对象 | null | 对象 |\n| animations | 用于给实体绑定动画/动画控制器(服务端) | 对象| null | 对象 |\n**scripts**\n这里不指Script Engine脚本引擎，而是指Molang表达式\n| 键  | 描述 | 类型 | 默认值 | 可选值 |\n| --- | --- | --- | --- | --- |\n| animate | 用于模仿原始实体的硬编码元素，它接受Minecraft原版中的标识符 | 字符串 | null | 所有字符 |\n栗子：\n```json\n  \"minecraft:entity\": {    \r\n    \"description\": {\r\n      \"identifier\": \"minecraft:player\",\r\n      \"is_spawnable\": false,\r\n      \"is_summonable\": true,\r\n      \"is_experimental\": false,\n      \"runtime_identifier\": \"minecraft:shulker\",\r\n      \"scripts\": {\r\n        \"animate\": [\r\n          \"byh1\",\n          \"byh2\"\n\r\n        ]\r\n      },\r\n      \"animations\": {\r\n        \"byh1\": \"animation.byh1\" //绑定动画（服务端），且在实体生成时会立刻调用一次（此处键要与animate中的一致）\r\n        \"byh2\": \"controller.animation.byh2\" //绑定动画控制器（服务端），且在实体生成时会立刻调用一次\r\n      }\r\n    },\n```","title":"3-5-2.行为包部分-实体行为(必选)"},{"path":"3-5-3.行为包部分-实体生成可选.md","content":"写完一个实体**行为定义**后往往是不够的，若想让这个生物能够自然生成还需要写一下**实体生成定义**(spawn_rules)\r\n\r\n首先在行为包根目录新建**spawn_rules**文件夹\r\n接着在该文件夹（或该文件夹的子文件夹里）创建 实体ID.json 文件\r\n\r\n栗子：\r\n```json\r\n{\r\n  \"format_version\": \"1.8.0\",\r\n  \"minecraft:spawn_rules\": {\r\n    \"description\": {\r\n      \"identifier\": \" \",  //实体 命名空间:ID 用于绑定对应实体\r\n      \"population_control\": \"animal\"  //种群控制：动物，也可选：monster（怪物）\r\n    },\r\n    \"conditions\": [  //生成条件\r\n      {\r\n        \"minecraft:spawns_on_block_filter\": \"minecraft:grass\",  //在什么方块上生成\r\n        \"minecraft:brightness_filter\": {  //在什么亮度下生成\r\n          \"min\": 7,  //最小\r\n          \"max\": 15,  //最大\r\n          \"adjust_for_weather\": false  //根据天气所变换？ 否\r\n        },\r\n        \"minecraft:herd\": {  //每次生成数量\r\n          \"min_size\":2,  //最小\r\n          \"max_size\":3  //最大\r\n        },\r\n    \r\n        \"minecraft:biome_filter\": {  //生物群系，PS:这是一个滤器\r\n          \"test\": \"has_biome_tag\", \"operator\":\"==\", \"value\": \"animal\"\r\n        }  //测试项目：生物群系标签，测试方式：等于（或一致的意思），值：animal。将会在带有animal标签的生物群系里生成。 \r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n更多实体生成条件请参考MinecraftWiki的官方文档\r\n关于滤器请参考 **4-5**\r\n","title":"3-5-3.行为包部分-实体生成(可选)"},{"path":"3-5-4.行为包部分-实体掉落物可选.md","content":"战利品掉落将会在实体被玩家打死后触发，至于是否会掉落就得看设定的几率了。\r\n\r\n战利品掉落绑定对应实体的方式与实体生成不同\r\n实体生成是实体生成去绑定实体行为定义\r\n实体掉落物则是实体行为定义去绑定战利品掉落物\r\n\r\n首先给实体添加一个组件：\r\n```json\r\n\"minecraft:loot\": {  //战利品掉落\r\n  \"tables\": \"loot_tables/entity/xx.json\"  //战利品掉落物定义文件路径\r\n}\r\n```\r\n\r\n其实战利品掉落物文件不一定要在lott_tables文件夹，但我们这依然按照传统惯例\r\n**<font color=\"#FF0000\">注意:路径最后JSON名字后面还需加上后缀名“.json”</font>**\r\n\r\n关于战利品定义请参考 4-2","title":"3-5-4.行为包部分-实体掉落物(可选)"},{"path":"3-5-5.资源包部分-实体资源包定义必选.md","content":"entities实体行为定义为实体在行为包里的**核心部分**，也是实体在整个Addon里的**核心部分**\r\n\r\nentity实体资源包定义则是**资源包**的**核心部分**，但是资源包部分为**可选**，当一旦选择了资源包部分，那么**实体资源包定义**将会是必须项。\r\n\r\n#### 作用\r\n**实体资源包定义**将会控制该实体的 材质、模型、贴图、动画、动画控制器、渲染控制器、生物蛋以及Molang脚本。 \r\n**对于**贴图起引导图片路径的作用\r\n**对于**材料、模型、动画、动画控制器、渲染控制器起绑定对应项目的作用\r\n**对于**生物蛋、脚本起定义的作用\r\n\r\n#### 开始\r\n首先在资源包根目录创建一个“entity”文件夹\r\n再在该文件夹（或该文件夹的子文件夹里）**创建** 实体ID.json 文件\r\n\r\n下面则是一个僵尸的栗子：\r\n```json\r\n//已删减不必要内容，已添加注释\r\n{\r\n  \"format_version\": \"1.8.0\",\r\n  \"minecraft:client_entity\": {\r\n    \"description\": {\r\n      \"identifier\": \"minecraft:zombie\",  //命名空间:ID，需要与行为包entities里的文件吻合。\r\n      \"materials\": {\r\n        \"default\": \"zombie\"  //材料\r\n      },\r\n      \"textures\": {  //贴图\r\n        \"default\": \"textures/entity/zombie/zombie\"  //最后的图片名字无需后缀.png\r\n      },\r\n      \"geometry\": {  //模型\r\n        \"default\": \"geometry.zombie.v1.8\"\r\n      },\r\n      \"spawn_egg\": {  //生物蛋\r\n        \"texture\": \"spawn_egg\",\r\n        \"texture_index\": 12\r\n      },\r\n      \"scripts\": {  //脚本\r\n        \"pre_animation\": [\r\n          \"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;\"\r\n        ]\r\n      },\r\n      \"animations\": {  //动画（客户端）\r\n        \"humanoid_big_head\": \"animation.humanoid.big_head\"\r\n           .....\r\n      },\r\n      \"animation_controllers\": [  //动画控制器（客户端）\r\n        { \"humanoid_baby_big_head\": \"controller.animation.humanoid.baby_big_head\" }\r\n          .....\r\n      \"render_controllers\": [ \"controller.render.zombie\" ]  //渲染控制器\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### 生物蛋\r\n**<font color=\"#FF0000\">首先你需要在行为定义把生物蛋生成 属性打开</font>**\r\n接着是实体资源包定义：\r\n官方一共给了两种写法\r\n\r\n首先是定义方法1：\r\n```\r\n\t\"spawn_egg\": {\r\n\t\t\"base_color\": \"#99e550\",  //基础颜色\r\n\t\t\"overlay_color\": \"#99e550\"  //套印颜色\r\n  }\r\n```\r\n使用官方提供的配色方案\r\n值类型为字符串，用十六进制颜色表达。\r\n\r\n然后是定义方法2：\n\r\n\r\n      \"spawn_egg\": {  //生物蛋\r\n        \"texture\": \"spawn_egg\",  //生物蛋ID,建议写成 实体ID_egg \r\n        \"texture_index\": 0  //只允许为正整数\r\n      }\n\r\n\r\n\r\n然后在textures/item_texture.json 文件里来控制生物蛋贴图位置\r\n\r\n    \"spawn_egg\": {  //生物蛋ID\r\n      \"textures\": \"textures/items/spawn\"  //贴图路径\r\n    }\r\n\r\n与物品贴图定义一致。\r\n\r\n\r\n#### 命名\r\n**生物命名**\r\n接着是在texts文件夹对生物进行命名\r\n\r\n```\r\nentity.byh:entity.name=测试生物\r\n```\r\n\r\n格式:\r\nentity:命名空间:ID.name=名字\r\n\r\n**生物蛋命名**\r\n\r\n```\r\nitem.spawn_egg.entity.byh:entity.name=生成测试生物\r\n```\r\n\r\n格式：\r\nitem.spawn_egg.entity.命名空间:ID.name=名字","title":"3-5-5.资源包部分-实体资源包定义(必选)"},{"path":"3-5-6.资源包部分-材料可选.md","content":"**materials**将决定生物是否透明与发光等属性\r\n\r\n首先在资源包根目录新建**materials**文件夹，接着在该文件夹里新建**entity.material**文件\r\n没错！这个文件的**后缀**将不再是.json！\r\n\r\n依然以文本编辑方式打开。\r\n\r\n```\r\n    \"byh:entity\": {},\r\n```\r\n\r\n引号里的为实体 命名空间:ID，花括号{ }里的则是属性定义，如果不写任何东西将会是默认形式。\n具体内容参考其它章节","title":"3-5-6.资源包部分-材料(可选)"},{"path":"3-5-7.资源包部分-模型可选.md","content":"#### 软件安装与配置\r\n**1.**首先下载**Blockbench**软件，下载完后双击exe程序安装。\r\n**2.**等待安装完毕，接着打开Blockbench。\r\n**3.**第一次打开后，界面会是英文。点击左上角的“file”，然后选择“Settings”\r\n![1](https://pic.downk.cc/item/5f31061214195aa59425ebbf.png)\r\n\r\n**4.**打开后的界面第一个选项就是语言设置，点它\r\n![2](https://pic.downk.cc/item/5f31061214195aa59425ebc3.png)\r\n然后切换到“中文（chinese）”\r\n![3](https://pic.downk.cc/item/5f31061214195aa59425ebc5.png)\r\n\r\n**5.**切换后，选择下面的close，接着重进Blockbench\r\n\r\n#### 开始制作\r\n![新建](https://pic.downk.cc/item/5f31102c14195aa59429a942.png)\r\n新建一个基岩版模型,文件名字与模型名字都推荐为 实体ID.json的格式。\r\n\r\n![模式](https://pic.downk.cc/item/5f310f8c14195aa594296da9.png)\r\n**Blockbench**一共有三种模式：编辑模式、画板模式、动画模式\r\n本次讲的编辑模式。\r\n\r\n**首先熟悉一下操作界面**\r\n![界面](https://pic.downk.cc/item/5f310f8c14195aa594296dab.png)\r\n上面的为工具栏，存放移动/旋转/尺寸等工具\r\n左边为贴图区\r\n右边为块\r\n中间则是一个可视化编辑\r\n\r\n![制作开始](https://pic.downk.cc/item/5f3111f014195aa5942a4c87.png)\r\n在右边进行添加一个块，用移动工具将块移动到你想要的位置，接着使用尺寸工具编辑长度与大小。\r\n也可以将块进行旋转等。\r\n\r\n你只需要尽情的发挥你的想象力！\r\n\r\n#### 导出\r\n制作完成后，我们要导出模型。\r\n![导出](https://pic.downk.cc/item/5f310f8c14195aa594296daf.png)\r\n但需要注意一点，不要直接选择“保存工程”\r\n而是要选择 导出 > 导出基岩版几何体\r\n\r\n![保存](https://pic.downk.cc/item/5f310f8c14195aa594296db3.png)\r\n接着保存到**资源包**根目录/models/entity 文件夹里\r\n**<font color=\"#FF00000\">注意：不能保存到/models/entity 文件夹的子文件夹里！</font>**\n\n模型与贴图一样都需要耐心\n如若跟我一样建模建得稀烂，像素画画得像坨屎可以花钱找模型师与画师帮你制作","title":"3-5-7.资源包部分-模型(可选)"},{"path":"3-5-8.资源包部分-贴图可选.md","content":"将**Blockbench**切换到**画板模式**\r\n然后在左下角新建或导入贴图\r\n贴图大小传统格式：\r\n16x16\r\n16x32\r\n32x32\r\n32x64\r\n64x64\r\n64x128\r\n128x128\r\n...\r\n1024x1024\n比例大多为1:1或1:2\n\r\n\r\n制作完成后在左下角保存贴图到**实体资源包定义**里对应的路径即可。\r\n![保存贴图](https://pic.downk.cc/item/5f31155414195aa5942b81af.png)","title":"3-5-8.资源包部分-贴图(可选)"},{"path":"3-5-9.动画.md","content":"动画分为**客户端**与**服务端**\r\n客户端即**资源包**，服务端则是**行为包**\r\n\r\n**服务端**不会存在任何视觉效果，用于制作一些逻辑，可以为Molang表达式、指令、事件等。\r\n\r\n**客户端**则专门负责视觉上的效果，客户端的动画才为普遍意义上的”动画“，控制生物骨骼模型的变化。\r\n\r\n本章节讲的为**客户端**动画，**服务端**动画请参考 专辑篇\r\n\r\n**动画**被规定为短名称，后可跟其完整的资源名称。该短名称能用于**动画控制器**和scripts/animate列表，其后的完整名称用于动画文件。\r\n\r\n在scripts/animate部分，你需要列出播放的动画以及播放顺序。你能直接指定动画，也能指定混合表达式（blend expression）\r\n\r\n将**Blockbench**切换到**动画模式**即可进行可视化的编辑，制作完毕你需要将动画保存至**资源包**根目录/animations 文件夹里（或该文件夹的子文件夹里）\n*****\n关于动画与动画控制器具体内容参考 请参考 4-2","title":"3-5-9.动画"},{"path":"3-5-10.动画控制器.md","content":"动画控制器也分为**客户端**与**服务端**\r\n客户端即**资源包**，服务端则是**行为包**\r\n\r\n**服务端**不会存在任何视觉效果，用于制作一些逻辑，可以为Molang表达式、指令、事件等。\r\n\r\n本章节讲的为**客户端**动画，**服务端**动画请参考 专辑篇\r\n\r\n\r\n我们需要能够控制动画的播放方式、播放时间以及与其他动画的交互方式。 在实体定义“scripts”中管理大量动画的同时，对动画进行分组动画。","title":"3-5-10.动画控制器"},{"path":"3-5-11.资源包部分-渲染控制器可选.md","content":"在资源包根目录新建”**render_controllers**“文件夹\r\n接着在该文件夹里(或该文件夹的子文件夹里)进行**新建**一个 实体ID.json文件。\r\n\r\n以下为一个渲染控制器的示例：\r\n```json\r\n{\r\n  \"format_version\": \"1.8.0\",\r\n  \"render_controllers\": {\r\n    \"controller.render.shengwu\": {  //渲染控制器的ID，格式必须为controller.render.XXXXX\r\n      \"geometry\": \"Geometry.default\",  \r\n      \"materials\": [ { \"*\": \"Material.default\" } ],\r\n      \"textures\": [ \"Texture.default\" ]\r\n    }\r\n  }\r\n}\r\n\r\n```\n具体内容参考其它章节","title":"3-5-11.资源包部分-渲染控制器(可选)"},{"path":"3-6.自定义颗粒效果.md","content":"粒子效果需适用/particle进行生成\n首先，在资源包根目录新建particles文件夹，接着在该文件夹或其子文件夹内新建 粒子ID.json 文件\n栗子：\n~~~\n{\n  \"format_version\": \"1.16.0\",\n  \"particle_effect\": {\n    \"description\": {\n      \"identifier\": \"byh:pa\", \n      \"basic_render_parameters\": {\n          \"material\": \"\"\n          \"texture\": \"\"\n      }\n    },\n    \"curves\": {\n    },\n    \"components\": \n      // 有关粒子生成频率的组件\n\n      // 有关粒子生成时长的组件\n\n      // 有关粒子生成形状（或通过粒子粒子生成位置和方向定义其形状）的组件\n\n      // 粒子生成容器本地空间（local space）组件\n\n      // 控制粒子初始状态的组件\n\n      // 控制/引导粒子行为的组件\n\n      // 影响粒子渲染方式的组件\n\n      // 影响粒子效果时长的组件\n    }\n  }\n}\n~~~\n### 解释\n#### format_version\n格式版本\n#### particle_effect\n粒子效果\n| 键  | 描述 | 类型 | 默认值 | 可选值 |\n| --- | --- | --- | --- | --- |\n| description | 基础信息 | 对象 | null | 对象 |\n| curves | 有关曲线的定义 | 对象 | null | 对象|\n| components | 组件 | 对象 | null | 对象 |\n##### description\n| 键  | 描述 | 类型 | 默认值 | 可选值 |\n| --- | --- | --- | --- | --- |\n| identifier | 粒子效果命名空间:ID | 字符串 | null  | 所有字符 |\n| basic_render_parameters | 基本渲染参数 | 对象 | null | 对象 |\n###### basic_render_parameters\n| 键  | 描述 | 类型 | 默认值 | 可选值 |\n| --- | --- | --- | --- | --- |\n| material | 粒子效果使用的材料 | 字符串 | null | 所有字符 |\n| texture | 粒子效果贴图路径 | 字符串 | null | 所有字符 |","title":"3-6.自定义颗粒效果"},{"path":"3-7.自定义音乐与音效.md","content":"音乐可使用/playsound指令进行播放\n首先，在资源包根目录创建”sounds“文件夹，接着在该文件夹内新建sound_definitions.json文件\n接着，这样写↓\n```json\n{\r\n    \"format_version\": \"1.16.0\",\r\n    \"sound_definitions\": {\r\n        \"music1\": {  //此处键的名字决定playsound指令将填写的id\r\n            \"sounds\": [\r\n                {\r\n                    \"name\": \"sounds/byh/music1\",  //音频文件路径\r\n                    \"volume\": 1.0  //音量\r\n                }\r\n            ]\r\n        },\r\n        \"music2\": {  \r\n            \"sounds\": [\r\n                {\r\n                    \"name\": \"sounds/byh/music2\",  \r\n                    \"volume\": 1.0 \r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\n```\n### 音频\n注意，MC只支持识别ogg音频文件与fsb特殊音频处理文件\nogg音频文件转换方法请自行[baidu.com](https://baidu.com)","title":"3-7.自定义音乐与音效"},{"path":"4.后期.md","content":"### 本章目录\n#### 4.后期篇\r\n###### 4-1.Addon加密\r\n###### 4-2.Addon发布\n在原博客的教程当中，还有一个专辑篇。但经改动后，将不算在本入门教程内，如若需要，请前往其它目录查看。\n","title":"4.后期"},{"path":"4-1.Addon加密.md","content":"提到**Addon加密**可谓是行内看笑话，行外看新鲜。\n对于JSON文件而言，所谓的“加密”只是对其英文与中文转换成Unicode编码形式，再进行压缩成一行，使看起来眼花缭乱。\n又或者是其它的障眼法。\n\n## Unicode\nUnicode（又称统一码、万国码、单一码）是计算机科学领域里的一项业界标准，包括字符集、编码方案等。Unicode是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的[二进制编码](https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81/1758517)，以满足跨语言、跨平台进行文本转换、处理的要求。1990年开始研发，1994年正式公布。","title":"4-1.Addon加密"},{"path":"4-2.Addon发布.md","content":"## 打包\n将资源包与行为包都复制到同一目录下\n![](https://img.imgdb.cn/item/60137ce33ffa7d37b32da177.png)\n接着再将其一起压缩\n![](https://img.imgdb.cn/item/60137ce33ffa7d37b32da179.png)\n*****\n## 发布\n以下仅为个人推荐\n### 官方渠道\n#### MinecraftBE商店\n这个门槛较高，需要是Microsoft的合作商才可\n#### 网易我的世界开发者平台\n算是国内最大的资源平台了，您需要去网易开发者官网使用身份证、银行卡等信息注册开发者账号\n### 其它渠道\n#### 各大论坛\n国内国外的都可，如[MCBBS中文论坛](https://mcbbs.com)、[Minecraftforum](https://www.minecraftforum.net/)、[Minebbs](https://www.minebbs.com/)\n#### MCPEDL\n全网最大的基岩版资源平台，注册门槛较低\n [https://mcpedl.com](https://mcpedl.com)\n#### 贴吧\n#### 视频网站\n虽说是视频网站，但可以以视频的方式宣传你的作品。\n国内视频网站中相对而言，推荐[Bilibili](https://bilibili.com)\n外国网站则[Youtube](https://youtube.com)","title":"4-2.Addon发布"},{"path":"基础概念.md","content":"# 基础概念\n本单元会认识语言文件、命令函数以及结构文件，并初步了解组件、组件组、事件三大巨头","title":"基础概念"},{"path":"Lang语言.md","content":"# Lang语言\n.lang是Mojang对不同语言文字存放的文件的后缀名\nlang文件都放在资源包根目录/texts文件夹内，因此在lang是资源包部分\n\n## 作用\n如 定义某个物品的显示文字，可以在该物品行为文件的组件中的minecraft:display_name组件直接设置。但是，如果你要让这些文字更好的方便管理且支持多语言那么就可以用到lang文件。\n\n## 使用\n在texts文件夹的目录下，可以看到下列文件\n* bg_BG.lang\n* cs_CZ.lang\n* da_DK.lang\n* de_DE.lang\n* el_GR.lang\n* en_GB.lang\n* en_US.lang\n* en_ES.lang\n* es_MX.lang\n* fi_FI.lang\n* fr_CA.lang\n* fr_FR.lang\n* hu_HU.lang\n* id_ID.lang\n* it_IT.lang\n* ja_JP.lang\n* ko_KR.lang\n* nb_NO.lang\n* nl_NL.lang\n* pl_PL.lang\n* pt_PT.lang\n* ru_RU.lang\n* sk_SK.lang\n* sv_SE.lang\n* tr_TR.lang\n* uk_UA.lang\n* zh_CN.lang\n* zh_TW.lang\n* language_names.json\n* languages.json\n\n默认有29种不同语言，你无需知道所有文件对应着什么语言，只需了解下面几个常用的：\nzh_CN 中文（简体）\nzh_TW 中文（繁体）\nen_US 英语（美式） English(US)\nen_GB 英语（英式） English(UK)\n### 自定义语言\n刚才说到“默认有”，也就是说，这些语言可以自定义？\n是的，这就要看到texts文件夹中的两个json文件了\n**languages.json**\n```json\n[\n\"en_US\"\n\"en_GB\",\n\"de_DE\",\n\"es_ES\",\n\"es_MX\",\n\"fr_FR\",\n\"fr_CA\",\n\"it_IT\",\n\"ja_JP\",\n\"ko_KR\",\n\"pt_BR\",\n\"pt_PT\",\n\"ru_RU\",\n\"zh_CN\"\n\"zh_TW\",\n\"nl_NL\",\n\"bg_BG\",\n\"cs_CZ\",\n\"da_DK\",\n\"el_GR\",\n\"fi_FI\",\n\"hu_HU\",\n\"id_ID\",\n\"nb_NO\",\n\"pl_PL\",\n\"sk_SK\",\n\"sv_SE\",\n\"tr_TR\",\n\"uk_UA\"\n]\n```\n该文件是一个数组，定义了都有哪些语言，也可以继续增加。\n**language_names.json**\n```\n[\n  [ \"en_US\", \"English (US)\" ],\n  [ \"en_GB\", \"English (UK)\" ],\n  [ \"de_DE\", \"Deutsch (Deutschland)\" ],\n  [ \"es_ES\", \"Español (España)\" ],\n  [ \"es_MX\", \"Español (México)\" ],\n  [ \"fr_FR\", \"Français (France)\" ],\n  [ \"fr_CA\", \"Français (Canada)\" ],\n  [ \"it_IT\", \"Italiano (Italia)\" ],\n  [ \"ja_JP\", \"日本語 (日本)\" ],\n  [ \"ko_KR\", \"한국어 (대한민국)\" ],\n  [ \"pt_BR\", \"Português (Brasil)\" ],\n  [ \"pt_PT\", \"Português (Portugal)\" ],\n  [ \"ru_RU\", \"Русский (Россия)\"],\n  [ \"zh_CN\", \"简体中文\" ],\n  [ \"zh_TW\", \"繁體中文\" ],\n  [ \"nl_NL\", \"Nederlands (Nederland)\" ],\n  [ \"bg_BG\", \"Български (BG)\" ],\n  [ \"cs_CZ\", \"Čeština (Česká republika)\" ],\n  [ \"da_DK\", \"Dansk (DA)\" ],\n  [ \"el_GR\", \"Ελληνικά (Ελλάδα)\" ],\n  [ \"fi_FI\", \"Suomi (Suomi)\" ],\n  [ \"hu_HU\", \"Magyar (HU)\" ],\n  [ \"id_ID\", \"Bahasa Indonesia (Indonesia)\" ],\n  [ \"nb_NO\", \"Norsk bokmål (Norge)\" ],\n  [ \"pl_PL\", \"Polski (PL)\" ],\n  [ \"sk_SK\", \"Slovensky (SK)\" ],\n  [ \"sv_SE\", \"Svenska (Sverige)\" ],\n  [ \"tr_TR\", \"Türkçe (Türkiye)\" ],\n  [ \"uk_UA\", \"Українська (Україна)\" ]\n]\n```\n该文件定义游戏中“语言设置”界面中\"不同语言选项\"所显示的文字，而这些文字则不是在lang文件中所定义的了。\n（这句话可能有点绕）\n### 编写\n打开lang文件，可以清除的发现格式非常简单\n下面是一个标准的语言串\n`xxx.xxxx.name=xxxx`\n等号前面部分为需要定义文字的位置，其中第一段是该位置的类型（包括物品item、方块tile、实体entity、UI等）\n等号前面第二段为该位置在该类型中的标识符，对于物品、方块、实体而言就是命名空间:ID。\n第三段则是统一的.name\n等号后面的是文字内容\n#### 注释\n在lang文件中，只要在前面加上一个#井号即代表注释\n示例：\n```\nitem.byh:a.name=物品A\n# 给byh:a物品命名为“物品A”\n tile.byh:b.name=方块B\n# 给byh:b方块命名为“物品B”\nentity.byh:c.name=方块C\n# 给byh:c实体命名为“实体C”\n```\n除此之外，也可以不按照标准格式的语言串写，只要满足“xxx.name=xxx”的格式即可\n对于这一些，你可以再在地图中配合使用/tellraw与/titleraw指令让其显示装载的资源包中的lang文件内的文字内容，以达到多语言地图的效果。\n以上两指令0具体使用方法，已超出本文章范围，请参考[MinecraftWiki]()\n\n## 你知道吗\njson中直接定义文字与lang文件定义相比，json中直接定义是有一个优点的\n那就是json中可以使用\\n、\\u、\\t、\\\\、\\b等这些常用的转义字符“\\”，而lang文件则不行","title":"Lang语言"},{"path":"Function命令函数.md","content":"# Function命令函数\n对于指令玩家来说，可能都知道游戏中有/function这条指令，但是未必大部分指令玩家都知道该指令的用法与意义。\n其实，/function是调用行为包根目录的functions文件夹内的对应.mcfunction文件中的所有指令\n`/function <文件名字（无需后缀）>`\n\n## 函数\n接触过编程的都知道，大部分编程语言中都有“函数”这个内容\n（请区分这里说的是**计算机函数**而非“数学函数”）\n函数在编程中的作用大概就是指一段可以直接被另一段程序或代码引用的代码。\n调用函数并传入新的参数进去，接着预先写好的函数就会按照新的参数执行一遍函数内的代码。\n栗子：\n```js\nfunction fun (x) {\n    value = x + 3\n    return value\n}\nfun(2)\n\n/*\n这里是用的js语言举例，这部分内容有点超纲，只是让大家明白function命令函数的作用与意义。\nfun是该函数的名字，该函数需要一个参数，该参数需是一个实数。\nfun函数会将运算 参数 + 3的结果，并返回结果\n“fun(2)”是调用fun函数，并指定参数为2，即2 + 3，最终会返回5\n如若不传参将会运行错误\n*/\n```\n 换到Minecarft里，行为包里的.mcfunction文件是封装了一堆其它指令，/function调用行为包里的文件将会一次性执行完文件内的指令，当然，目前mc中的命令函数只是可被调用，无法做到传参。\n\n## 编写\n这是行为包部分的内容，首先在行为包根目录新建一个“functions”文件夹，接着可以在该文件夹的里面子文件夹里面创建“xxx.mcfunction”文件\n使用文本编辑器打开.mcfunction文件\n接着即可在里面随意的写入mc中的指令了\n\n### 格式与注释\n格式为一行一串指令，开头斜杆/为可要可不要，执行身份是以管理员身份。\n注释也与lang文件一样，使用#井号标注。\n实例：\n```\nsay Hello Players!\ngive @a diammon 64\nkill @a[tag!=GoodPlayer]\n# 我是注释\n```\n## 使用\n写好后，加载行为包进入存档。\n若a.mcfunction文件在functions文件夹的根目录\n那么只需输入`/function a`即可\n若b.mcfunction文件在非functions文件夹的根目录里，而是在子文件夹内，如在 行为包根目录/functions/cs/b.mcfunction\n那么需在文件名前面加上目录`/function cs/b`\n\n## 运用范围\n对于指令玩家而言，可以用来做一键指令\n但对于Addon开发者而言，可以结合动画或动画控制器以及实体行为做出许多复杂的内容\n","title":"Function命令函数"},{"path":"Structure结构.md","content":"# Structure结构\n## 结构方块\n说到结构，那么就必定要提到结构方块（Structure Block）了\n基岩版的结构方块一共有三个模式，与java版的相比，基岩版独占了一种模式\n### 3D导出模式\n将会把结构导出为obj模型，该模式属基岩版独占。\n### 保存模式\n将会把结构保存在地图数据中\n![](https://static.wikia.nocookie.net/minecraft_zh_gamepedia/images/d/d8/Structure_Block_Bedrock_ClassicUI_Load.png/revision/latest/scale-to-width-down/800?cb=20200623075912)\n### 加载模式\n加载已保存的结构\n\n## .mcstructure\n除了3D导出模式以外，保存模式也可以导出结构，保存模式所导出的文件才是结构文件，即.mcstructure文件\n.mcstructure文件是未压缩的[NBT文件](https://wiki.vg/NBT#Specification)。与所有的基岩版NBT文件一样，它们以低位字节序格式存储。不建议使用文本方式进行编辑该文件。\n\n### 使用\n可将结构文件放置到行为包根目录的structures文件夹中，或其子文件夹中。\n进入存档，可使用/structure指令生成行为包中的结构文件，/structure与/function指令性质一样，但要注意一点\n**structures**文件夹中的所有文件都被赋予了*mystructure*的命名空间。","title":"Structure结构"},{"path":"组件、组件组、事件.md","content":"# 组件、组件组、事件\n为何要三个概念一起讲呢？因为它们之间的关联非常的大。\n在1.16.100及更高版本里，物品、方块、实体行为都能使用组件、组件组、事件，但三者被运用最多的地方也还是实体行为了，本文章中也主要是讲实体上的，物品、方块方面的也基本上适用。\n*****\n## 组件\n即**components**，物品、方块、实体行为都会用到组件，对应的组件定义了物品、方块、实体对应的属性\n组件的数据格式主要分为两种，国际版的组件命名空间均为“minecraft”，网易的额外接口的命名空间则是“netease”\n```json\n\"components\": {\n    //第一种，对象格式，一般用该格式的组件都有多个要设置的键，如“minecraft:boos”血条组件\n    \"minecraft:com1\": {\n        “value2”: 1,\n        \"value2\": true\n        \"value3\": [\n            \"player\",\n            \"zombie\",\n            \"pig\"\n.        ]\n    },\n    //第二种，直接写值格式，运用该格式的组件如“minecraft:loot”掉落物组件\n    \"minecraft:com2\": \"阿哲\"\n    //以上组件名均是无效，仅用于示例\n}\n```\n组件列表请查看AddonAPI文档\n实体组件类型分为四大类：固有属性组件（如碰撞箱子）、行为组件（如近战、看着玩家、自由走动）、触发器、其它\n## 组件组\n即**component_groups**，可理解为里面有多个不同的components，组件堆的名字为自定义。组件组中的components默认不会被启用，需通过**事件**来控制\n格式示例：\n```json\n\"component_groups\"： {\n    \"组件组1\": {  //组件组名字，可中文\n        \"minecraft:com3\": {  //里面随意的写组件即可\n            \"are_you_fool\": false\n        }\n    },\n    \"组件组2\": {\n        \"minecraft:com3\": {\n            \"are_you_fool\": true\n        }\n    }\n}\n```\n\n## 事件\n即**events**，事件控制组件组的启用于禁用\n基础格式示例：\n```json\n\"events\": {\n    \"事件1\": {  //事件名，可中文\n        \"add\": {  //添加\n            \"component_groups\": [\n                \"组件组1\"  //组件组列表\n            ]\n        },\n        \"remove\": {  //删除\n            \"component_groups\": [,\n                \"组件组2\",\n                \"组件组3\"\n            ]\n        }\n    },\n    \"事件2\": {\n        \"add\": {  \n            \"component_groups\": [\n                \"组件组1\",\n                \"组件组2\",\n                \"组件组3\"\n            ]\n        }\n    }\n}\n```\n事件分为被动事件与主动事件，主动事件是游戏中已被注册的几个事件名，数量不多，主动事件无需被触发才可执行，会自动在满足该事件要求下执行，如”minecraft:spawn“事件，会在该实体被生成时立刻执行。\n被动事件需要components或component_groups中的组件进行触发。\n以上为最基础的事件，事件还有许多带有逻辑的运用方式，这些请参考”专辑篇“\n*****\n三者集合起来可以做到许许多多的逻辑，组件中还有触发器等一些列内容，比如：先由components中的触发器触发一个事件，事件为其添加组件组，组件组又有新的触发器规则来触发事件添加/删除组件组，就这样循环，便可做出很多有意思的东西。","title":"组件、组件组、事件"},{"path":"名词解释.md","content":"# 名词解释\n本单元将有各类专业名词的解释","title":"名词解释"},{"path":"标识符.md","content":"# 标识符\n**标识符**（identifier）是指用来标识某个实体的一个符号，在不同的应用环境下有不同的含义。在计算机编程语言中，*标识符*是用户编程时使用的名字，用于给变量、常量、函数、语句块等命名，以建立起名称与使用之间的关系。*标识符*通常由字母和数字以及其它字符构成。\n*以上摘自百度百科*\n*****\n对于MC中的实体、方块、物品来说，相当于是命名空间:ID。","title":"标识符"},{"path":"命名空间.md","content":"# 命名空间\n即namespace，也称名称空间 。命名空间指定了某个东西的所有权，可以看作是文件夹，比如：\n有两个都叫做”file.txt“的文件，显然，它们无法放到同一目录下，但是可以先在该目录分别新建一个”a“文件夹和一个”b“文件夹，再将这两个file.txt文件分别放入不同文件夹就可以做到共存。\n换到Minecarft里而言就是：\n假如两个附加包里都有个叫做“item”的物品，你是无法同时使用的，先加载哪个包才能先加载哪个物品\r\n此时，**命名空间**就有作用了，如果一个改为“a:item”,另一个改为\"b:item\"，这样就不会冲突\n*****\n在上面的举例里，也知道了命名空间在MC中大多都是冒号左边的部分，但这并非全部，主要是物品、方块、实体、配方、特征、结构、动画、动画控制器方面。原版中的命名空间均为”minecraft“。\n命名空间的要求，在MC中是建议英文+数字或全英文，大小写都可，除非是改原版文件，否则请不要命名为”minecraft“\n取命名空间的名字这里提几个小建议：\n对于个人而言，可以是自己的名字的英文或拼音或缩写等\n对于集体而言，可以是集体的名称的英文或拼音或缩写等\n总之，取一些有代表性的，即起到了命名空间的作用，也起到了版权声明的作用。\n","title":"命名空间"},{"path":"优先权.md","content":"# 优先权\n即**priority**，一般称为*权重*。权重一般用于**实体行为**当中，并非是某个组件，而是一个键的名字，作用与它的名字一样——优先权。\n\n## 作用\n![](https://img.imgdb.cn/item/6013ca5f3ffa7d37b3564b93.png)\n在**实体行为**文件里基本上都能看到它的身影.\n实体组件类型中的行为组件决定着生物的各种行为，如跳、跑、攻击、发射、走等\n拿原版中的骷髅来说，完成一个靠近目标并射箭然后被反击逃跑的过程需要先 *环视→走→发射→ 跑*\n*****\n这些行为必须要有**一定顺序**的执行，否则就乱套了，因此*权重*的作用就体现出来了。\n**权重**会规定该行为的执行次序，priority的值为**非负整数**，最小为0，0代表最先，1其后。","title":"优先权"},{"path":"专辑篇.md","content":"","title":"专辑篇"},{"path":"脚本引擎.md","content":"","title":"脚本引擎"}]